1 Добавьте в свой проект класс исключений, возникающих при работе с базой данных.
Придумайте - где их можно бросать? Как вариант - нет соединения с БД, ошибка в запросе.

ТОЛЬКО ПРИ РАБОТЕ С БАЗОЙ ДАНННЫХ.
Изменяется логика работы при работе с методами базы данных.
Т.к. выбрасывается исключение, то дальнейшее выполнение метода базы данных прекращается, а следовательно
метод всегда возвращает ожидаемое значение, а не значение при ошибке.
Отсюда и логика изменяется. Нет смысла проверять возвращаемое значение на значение при ошибке.

Добавил выбрасывание исключений в Db.php
Изменяю логику связанных c Db методов классов:
- Model.php
-- findAll (удалёно return false)
очень сильно ругается PHPDoc требует писать @throws DbException
-- findById (удалил лишние проверки)
-- findLastRecords (удалено return false)
-- insert (удалил лишние проверки)

Смотрю изменения в более высоких слоях:
- Article.php, Author.php (изм. нет)
!!! при запросе $article->author (__get()) может выпасть исключение, если таблицы authors не найдёт!!!
- Controller, AdminPanelController (изм. нет)
- Controllers:
-- Index.php (findAll - удалены излишние проверки)
-- Article.php (изм. нет)
-- AdminPanel/Index.php (findAll - удалены излишние проверки)
-- AdminPanel/Editing.php (изм. нет)
-- AdminPanel/Save.php (изм. нет)
- Router выдаёт лишь имя класса и имя метода. В файле изменений нет.
- Templates (ищем $article->author):
-- index.php . Блин: Автор: <?php echo $article->author->name ?? ''; ?>
половину шаблона в поток отправим и фронт-контроллер исключение словит. И далее , к половине уже отправленного шаблона
добавит "красиво" страницу с ошибкой. БЕДА. чат не помог. НУ ПРЯМ БЕДА.
Альберт занят, да ещё и злится, а я не знаю какой вариант решения проблемы применить.

Во всех связанных методах добавлен PHPDoc @throws DbException

Сделано


2 Ловите исключения из пункта 1 во фронт-контроллере,
поймав же, выдавайте пользователю красивую страницу с сообщением об ошибке.

Читаю мануал. Раз возникла ошибка - в ответ клиенту надо выдать некое оповещение - код состояния HTTP
https://ru.wikipedia.org/wiki/Список_кодов_состояния_HTTP
4xx: Client Error (ошибка клиента):
5xx: Server Error (ошибка сервера):
интересно. Но загон. Если сервер принял запрос, обработал и выдал ответ - то лучше всегда отправлять 200.

Создаю красивый шаблон ошибки.
Создаю контроллер для представления ошибок

Сделано


3 Добавьте класс исключений, означающих "Ошибка 404 - не найдено".
Бросайте такое исключение в ситуациях, когда вы не можете найти в базе запрашиваемую запись.
Добавьте обработку исключений этого типа во фронт-контроллер.

Создаю пространство имён \App\Exceptions
в него перемещаю DbException, переименовываю в Db
Добавляю новый класс DbNotFoundRecord, наследую от Db
Исключение внедряем везде, где происходит запрос записи из базы данных.
Это:
- Model
-- findById (удалён return false, изменён PHPDoc)
проверяю все классы где используется findById, удаляю лишнюю проверку на false, упрощаю логику, изменяю PHPDoc
- \App\Models\Article (сделано)
- \App\Controllers\Article (сделано)
- \App\Controllers\AdminPanel\Editing (сделано)
- \App\Controllers\AdminPanel\Save (сделано)

Добавлена обработка в фронт-контроллер, обязательно перед обработкой Db (typehinting)
В контроллер добавлено поле - код ответа. И его обработка.

Сделано


4 Добавьте в базовую модель метод fill(array $data), который заполняет свойства модели данными из массива, валидируя их.
Примените в этом методе паттерн "Мультиисключение".

Итак, что надо:
- получен массив
- по имени св-ва определяем значение в массиве
- выполняем валидацию этого значения
- записываем значение в св-во.
- если валидацию не прошел - то создаём(не бросаем) исключение и добавляем его в объект мультиисключение
- при наличии исключений - выбрасываем.

где ловить его? Там, где потребуются сообщения об ошибках.
- App\Controllers\AdminPanel\Save (здесь ловлю исключение и передаю ошибоки в шаблон)
- изменяю шаблон adminPanel/save.php (добавляю $error)

Сделано. проверено на работоспособность


5. * Добавьте в свой проект класс-логгер.
Его задача - записывать в текстовый лог информацию об ошибках - когда и где возникла ошибка, какая.
Логируйте исключения из пунктов 1 и 3.

Надо:
- создать класс-логгер.
- добавить запись в лог, лучше - в самих классах это реализовать.

Сделано. проверено.

