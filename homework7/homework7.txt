1 Примените генератор в классе Db.
У вас уже есть метод, называющийся как-то вроде query(), который использует fetchAll() из PDO.
Сделайте метод-копию queryEach(), который будет генерировать запись за записью из ответа сервера
базы данных, не делая fetchAll(), а построчно исполняя fetch().
Проверьте работу этого метода, использовав его в программе.

Скопировал с homework6. Изменил пути на homework7. Проверил работоспособность.
Сделал метод-копию. Чуть изменил Model.php - метод findAll(), findLastRecords(). Неожиданно, но всё.

Сделано. Проверено.

2 Создайте класс AdminDataTable.
Его конструктор принимает на вход массив моделей (это будут строки таблицы) и массив функций (это будут столбцы)
Метод render() отображает таблицу следующим образом:
  1 Для каждой записи (это строка таблицы) последовательно вызываются функции (каждая - это столбец таблицы),
  в них передается запись (модель)
  2 То, что вернула функция - становится значением ячейки таблицы

Как назвать аргументы? По смыслу из шаблона. echo $function($model);
Добавил класс adminDataTable.php, шаблон adminDataTable.php, файл с массивом функций functions.php
Изменил контроллер Index.php админ-панели, изменил шаблон index.php админ панели.
Неожиданно, но всё. Странно.

Сделано

3 Примените этот класс в своей админ-панели

Странно. Уже сделал.

Проверил.
