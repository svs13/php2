1. Добавьте в свое приложение класс App\Config.
Объект этого класса при создании должен читать и сохранять в себе файл конфигурации.
Его применение:
    $config = new \App\Config;
    echo $config->data['db']['host'];
    // пусть это пока коряво смотрится, но по-другому мы еще не умеем

Сущность Config
    его изменяемые параметры (св-ва):
        данные файла конфига
    его действия (методы):
        создание:
            чтение из файла конфигурации данных в с-во данные

Как произвести чтение из файла конфига? Простым способом:
$data = require $path;

Сделано.

2. Если на уроке изучали метод insert(), то продумайте и реализуйте метод update().
Его задача - обновить поля модели, которая ранее была получена из базы данных.
Используйте поле id для понимания того, какую запись нужно обновлять!

Сделано

3. Если же уже изучили update() - напишите метод insert().
Он вставляет в базу данных новую запись, основываясь на данных объекта.
Не забудьте, что после успешной вставки вы должны заполнить свойство id объекта!

Сделано.

4. Реализуйте метод save(), который решит - "новая" модель или нет и, в зависимости от этого, вызовет либо insert(), либо update().

Сделано.

5. Добавьте к моделям метод delete()

Сделано.

6. На базе реализованного вами кода сделайте простейшую (!) админ-панель новостей с функциями добавления, удаления и редактирования новости.
Отсюда:
- просто выводим список новостей.
- каждый параметр новости в изменяемом текстовом поле
- кнопки редактировать, удалить для каждой существующей новости
- добавление новости - отдельной строкой списка.

Сделано.

7. * Изучите что такое синглтон (слайды + консультация в чате поддержки) и сделайте класс App\Config синглтоном.
согласно слайдам:
- сделать конструктор не публичным
знаю только protected
Сделано
- описать статич. метод, возвращающий объект
чтобы возврщать объект, надо его где-то хранить.
использую статик св-во protected static $config;
как обратиться ? static:$config почему не self::$config?
предусмотрено ли тут наследование? нет не предусмотрено (путь то до конфига не изменный, переопределять для этого __constract() - "дико")
по делу нужено св-во protected $path для организации наследования.
Но класс тогда станет практически абстрактным (если писать protected $path = null)
По заданию делать этого не зачем.
а следовательно и сомнения прочь - использую self::$config.
Сделано.
- в этом методе считать число объектов и возвращать сущ-ий или иной.
Сделано.

Проверено на работоспособность, исправлена ошибка в классе Db при создании конфига.
Работает.

Вопросы, когда Альберт освободится:
1. Что использовать при следовании шаблону ActiveRecord:
$article->content = 'text'; или $article->setContent('text');
в чём разница? в том что в методе может быть любой код.
не горожу лишнего, использую первый вариант.
2. Если класс Config сделать абстрактным и наследовать от него отдельные конфиги для базы данных, гостевой галлереи?
такой подход используется? или всегда один конфиг для всего?
ответ - обычно один конфиг на приложение.
3. В уроке про интерфейсы и трейты, а в дз ни того, ни другого, странно. Они требуются?
ответ - если в дз явно не написано - то не обязательно.
Запомнить:
"Начинать проектирование с интерфейсов - очень хорошо"
"ИНТЕРФЕЙС КАК ТРЕБОВАНИЕ К РЕАЛИЗАЦИИ, А ТРЕЙТ КАК КОНКРЕТНАЯ РЕАЛИЗАЦИЯ"
Стандартную реализацию интерфейса можно "запихнуть" в трейт и его использовать.


Последняя проверка :
1. Мусор в коде
2. По именам должен быть понятен смысл
3. Не должно быть излишних проверок "своих" значений
4. Стиль написания кода

Сделано.

Редактирование от 06.08.18
1. Исправлена ошибка в строке запроса c VALUE на VALUES.

Редактирование от 15.08.18
1. Описание св-ва id класса Model сделал публичным. Удалил метод getId()
2. Изменил шаблон index.php, adminPanel.php
3. Проверил работоспособность

Работа над ошибками 17.08.18
1. /App/Config.php изменил имя с $config на $instance.
2. /App/Model.php delete() - удалено очищение свойств.
3. В adminPanel.php выполнял 3 разных действия (добавления, удаления и редактирования). Это ужасно. Разбил его на части.
- удалено 2 файла /adminPanel.php, /templates/adminPanel.php
- добавлено 4 файла. В adminPanel: index.php, save.php, delete.php. В templates/adminPanel: index.php
- изменил ссылку на админ-панель в /templates/index.php
Проверил работоспособность.
